#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re
import os
import sys
import getopt
import fitz  # pymupdf
import cssutils

from pprint import pprint

"""
AutoPDFBookmark Project
Generate bookmark(outline) according to the CSS file given

the CSS file should contain selector like:

body{
  font-family:"Microsoft Yahei";
  font-size: 14pt;
  line-height: 1.4em;
 }

h1 {
  font-family:"Microsoft Yahei";
  font-size: 28pt;
}

h2 {
  font-family:"Microsoft Yahei";
  font-size: 20pt;
}
...

and the PDF file should be generated by this CSS file
here we use Markdown PDF on vscode running 'Export(pdf)'

!!! only support pt for font-size.
!!! the 'font-size' in body CANNOT equal to the h1,h2,h3... styles, else will encount error.
"""

__version__ = "0.5.1"
__author__ = "Castle"
__email__ = "castleodinland@gmail.com"
__license__ = "GPL"

css_list = []  # [selector, {xxx1:yyy1, xxx2:yyy2, ...}]context["size"]

re_font_size = r"(\d+)pt"  # -> 14pt
re_head_title = r"h(\d+)"  # -> h1, h2, h3, h4, h5, h6
re_chapter_code = r"(\d+\.\d+\.\d+)|(\d+\.\d+)|(\d+\.)"  # -> 1.2.3 or 1.2 or 1.

pdf_input_name = "mypdf.pdf"  # default input pdf name
css_input_name = "markdownhere.css"  # default input css name
pdf_output_name = None  # default output pdf name

# the acceptable margin between CSS font-size (`selector_font_size`) and
# actual font size (`context["size"]`)
fontsize_threshold = 0.2


def usage():
    print("AutoPDFBookmark version : %s" % (__version__))
    print("\nThis is the usage function")
    print("Usage:")
    print(
        "python AutoPDFBookmark.py -f <pdf_input_file> -c <css_input_file> [-o <pdf_output_file>]"
    )
    print("-f, --pdf : specify the input .pdf file name, mypdf.pdf as default")
    print("-c, --css : specify the input .css file name, markdownhere.css as default")
    print("-o, --output : specify the output .pdf file name, mypdf_new.pdf as default")


def load_css_file(css_file):
    with open(css_file, "rb") as fd:
        css_string = fd.read()
    sheet = cssutils.parseString(css_string)
    css_list = {}
    for rule in sheet:
        if hasattr(rule, "selectorText") is False:
            # e.g., CSSComment doesn't have selectorText
            continue
        selector = rule.selectorText
        # styles = rule.style.cssText
        inner_dict = {}
        for property in rule.style:
            # pprint(property)
            inner_dict[property.name] = property.value
        css_list[selector] = inner_dict
    return css_list


def get_header_level_from_selector(key, values):
    # get selector named h* and return header level
    # if not h*, return None
    pattern = re.compile(re_head_title)
    match_obj = pattern.match(key)
    if match_obj:
        bmk_level = int(match_obj.group(1))
    else:
        bmk_level = None

    return bmk_level


def get_font_size_from_selector(key, values):
    if "font-size" not in values:
        return None

    pattern = re.compile(re_font_size)
    match_obj = pattern.match(values["font-size"])
    return int(match_obj.group(1))


if __name__ == "__main__":
    print(fitz.__doc__)

    try:
        options, args = getopt.getopt(
            sys.argv[1:], "hf:c:o:", ["help", "pdf=", "css=", "output="]
        )
    except getopt.GetoptError:
        usage()
        sys.exit(0)

    for name, value in options:
        if name in ("-h", "--help"):
            usage()
            sys.exit(0)
        if name in ("-f", "--pdf"):
            pdf_input_name = value
            if pdf_output_name is None:
                pdf_input_basename = os.path.splitext(pdf_input_name)[0]
                pdf_output_name = pdf_input_basename + "_new" + ".pdf"
        if name in ("-c", "--css"):
            css_input_name = value
        if name in ("-o", "--output"):
            pdf_output_name = value
            print("output file name: %s" % (pdf_output_name))

    css_list = load_css_file(css_input_name)
    # pprint(css_list)

    doc = fitz.open(pdf_input_name)
    toc = doc.get_toc(simple=False)
    if toc:
        assert "the file has toc."

    # the bmk_level should start from 1, if not, assert error
    has_main_title = False

    # for pages in doc:
    for page_num, page in enumerate(doc, 1):
        blocks = page.get_text("dict", flags=11)["blocks"]

        for one_block in blocks:
            context = one_block["lines"][0]["spans"][0]
            # print (context)
            if not context["flags"] == 0:
                continue

            for key, values in css_list.items():
                bmk_level = get_header_level_from_selector(key, values)
                if not bmk_level:
                    continue

                # get font-size & font-family
                selector_font_size = get_font_size_from_selector(key, values)
                if not selector_font_size:
                    continue

                if abs(selector_font_size - context["size"]) <= fontsize_threshold:
                    # chapter text filter
                    # pt1 = re.compile(re_chapter_code)
                    # mo = pt1.match(context["text"])
                    # if mo is None:
                    # continue
                    print(f'match: {context["text"]} [level:{bmk_level}]')
                    line_local = context["bbox"][1]
                    point = fitz.Point(0, float(line_local))
                    if not has_main_title and bmk_level != 1:
                        assert "document starts from level %d" % (bmk_level)
                    elif not has_main_title:
                        has_main_title = True

                    # add bookmark
                    toc.append(
                        [
                            bmk_level,
                            context["text"],
                            page_num,
                            {
                                "kind": fitz.LINK_GOTO,
                                "to": point,
                                "collapse": 1,
                            },
                        ]
                    )

    # pprint(toc)
    doc.set_toc(toc)
    doc.save(pdf_output_name)
    doc.close()
